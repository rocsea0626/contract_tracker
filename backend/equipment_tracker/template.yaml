AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  equipment_tracker

  Sample SAM Template for equipment_tracker
  
Globals:
  Function:
    Layers:
    - !Ref CommonLayer
    Handler: app.lambdaHandler
    Runtime: nodejs12.x
    Architectures:
      - x86_64
    Timeout: 3
    Environment:
      Variables:
        DB_NAME: !Ref EquipmentsTable

Parameters:
  StackName:
    Type: String
    Description: Stack name will be used in api.yaml
  Stage:
    Type: String
    Description: Stage variable for ApiGateway

Resources:
  EquipmentTrackerApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${StackName}'
      StageName: !Sub '${Stage}'
      Auth:
        ApiKeyRequired: true
      Cors:
        AllowMethods: "'GET,OPTIONS,DELETE,POST'"
        AllowHeaders: "'Origin,X-Requested-With,Content-Type,Accept,X-Access-Token,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
        MaxAge: "'1800'"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./api.yaml

  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - EquipmentTrackerApiUsagePlan
    Properties:
      Name: !Sub 'ApiKey-${StackName}'
      Description: !Sub 'Developer ApiKey for ${StackName}'
      Enabled: true
      StageKeys:
        - RestApiId: !Ref EquipmentTrackerApi
          StageName: !Sub '${Stage}'

  EquipmentTrackerApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - EquipmentTrackerApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref EquipmentTrackerApi
          Stage: !Sub '${Stage}'
      Description: !Sub 'Developer usage plan for ${StackName}'
      Quota:
        Limit: 1000
        Period: DAY
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: !Sub 'UsagePlan-${StackName}'

  EquipmentTrackerApiPlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref EquipmentTrackerApiUsagePlan

  EquipmentTrackerApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AWSLambda_FullAccess

  EquipmentsSearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/equipments/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EquipmentsTable

  GetEquipment:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/get-equipment/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EquipmentsTable

  DeleteEquipment:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/get-equipment/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EquipmentsTable

  CreateEquipment:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/create-equipment/
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref EquipmentsTable
  Health:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: handlers/health/

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: equiement-tracker-dependencies
      Description: Common dependencies for lambdas
      ContentUri: layers/nodejs
      CompatibleRuntimes:
        - nodejs12.x
      RetentionPolicy: Retain

  EquipmentsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: EquipmentsTable
      AttributeDefinitions:
        - AttributeName: EquipmentNumber
          AttributeType: S
      KeySchema:
        - AttributeName: EquipmentNumber
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1

Outputs:
  ApiEndpointUrl:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${EquipmentTrackerApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  ApiKeyID:
    Description: "API key ID"
    Value: !Ref ApiKey
  ApiKey:
    Description: "You can find your API Key in the AWS console: (Put in the request HEADER as 'x-api-key')"
    Value: !Sub "https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/api-keys/${ApiKey}"
  Health:
    Description: "Health check ARN"
    Value: !GetAtt Health.Arn
  HealthIamRole:
    Description: "Implicit IAM Role created for Health function"
    Value: !GetAtt HealthRole.Arn
  CommonLayer:
    Description: "CommonLayer Function ARN"
    Value: !Ref CommonLayer
  GetEquipment:
    Description: "GetEquipment Function ARN"
    Value: !GetAtt GetEquipment.Arn
  GetEquipmentIamRole:
    Description: "Implicit IAM Role created for GetEquipment function"
    Value: !GetAtt GetEquipmentRole.Arn
  EquipmentsSearch:
    Description: "EquipmentsSearch Function ARN"
    Value: !GetAtt EquipmentsSearch.Arn
  EquipmentsSearchIamRole:
    Description: "Implicit IAM Role created for EquipmentsSearch function"
    Value: !GetAtt EquipmentsSearchRole.Arn
  DeleteEquipment:
    Description: "DeleteEquipment Function ARN"
    Value: !GetAtt DeleteEquipment.Arn
  DeleteEquipmentIamRole:
    Description: "Implicit IAM Role created for DeleteEquipment function"
    Value: !GetAtt DeleteEquipmentRole.Arn
  CreateEquipment:
    Description: "CreateEquipment Function ARN"
    Value: !GetAtt CreateEquipment.Arn
  CreateEquipmentIamRole:
    Description: "Implicit IAM Role created for CreateEquipment function"
    Value: !GetAtt CreateEquipmentRole.Arn
  EquipmentsTableName:
    Description: "Name of created database table"
    Value: !Select [ 1, !Split [ '/', !GetAtt EquipmentsTable.Arn ] ]